name: build-exes

env:
  PYTHON_VERSION_BUILD_EXES: "3.10"

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "PyInstaller log level"
        required: true
        default: "INFO"

jobs:
  build-executables:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            executable_ext: .exe
            executable_os: win
          - os: macos-latest
            executable_ext: ""
            executable_os: macOS

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # get all history and tags

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_BUILD_EXES }}

      - name: Cache the virtualenv
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: venv-build-${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install poetry
        run: python -m pip install poetry==1.2.2

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --without dev

      - name: Get exectuable version name (non Windows)
        if: "!contains(matrix.os, 'windows')"
        run: |
          CUR_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_TAG is: $CUR_TAG"
          echo "cur_tag=$CUR_TAG" >> $GITHUB_ENV
          vers=$(git describe --tags)
          echo "vers is: $vers"
          echo "vers=$vers" >> $GITHUB_ENV

      - name: Get exectuable version name (Windows)
        if: contains(matrix.os, 'windows')
        run: |
          $CUR_TAG = $(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_TAG is: $CUR_TAG"
          echo "cur_tag=$CUR_TAG" >> $env:GITHUB_ENV
          $vers = git describe --tags
          echo "vers is: $vers"
          echo "vers=$vers" >> $env:GITHUB_ENV

      - name: Build with pyinstaller (non Windows)
        if: "!contains(matrix.os, 'windows')"
        working-directory: pyinstaller
        run: ./make.sh matflow-${{ env.vers }}-${{ matrix.executable_os }} ${{ github.event.inputs.logLevel }}

      - name: Build with pyinstaller (Windows)
        if: contains(matrix.os, 'windows')
        working-directory: pyinstaller
        run: ./make.ps1 -ExeName "matflow-${{ env.vers }}-${{ matrix.executable_os }}" -LogLevel ${{ github.event.inputs.logLevel }}

      - name: Upload executable artifact
        uses: actions/upload-artifact@v3
        with:
          name: matflow-${{ env.vers }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}
          path: pyinstaller/dist/matflow-${{ env.vers }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}

      - name: Upload spec file
        uses: actions/upload-artifact@v3
        with:
          name: matflow-${{ env.vers }}-${{ matrix.executable_os }}.spec
          path: pyinstaller/matflow-${{ env.vers }}-${{ matrix.executable_os }}.spec

      - name: Upload build directory
        uses: actions/upload-artifact@v3
        with:
          name: matflow-${{ env.vers }}-${{ matrix.executable_os }}-build
          path: pyinstaller/build/matflow-${{ env.vers }}-${{ matrix.executable_os }}

      - name: Version check (windows)
        if: contains(matrix.os, 'windows')
        run: |
          $tag = "${{ env.cur_tag }}"
          $tagNoV = $tag.trim('v')
          $matflow_vers = pyinstaller/dist/matflow-${{ env.vers }}-${{ matrix.executable_os }}${{ matrix.executable_ext }} --version
          $matflow_vers_expected = "matflow, version $tagNoV"
          echo $matflow_vers
          echo "$matflow_vers_expected"
          if ($matflow_vers -ne $matflow_vers_expected) {
            exit 1
          }

      - name: Version check (non-windows)
        if: "!contains(matrix.os, 'windows')"
        run: |
          tag=${{ env.cur_tag }}
          tagNoV=${tag:1}
          matflow_vers=$(pyinstaller/dist/matflow-${{ env.vers }}-${{ matrix.executable_os }}${{ matrix.executable_ext }} --version)
          matflow_vers_expected="matflow, version $tagNoV"
          echo $matflow_vers
          echo $matflow_vers_expected
          [ "$matflow_vers" = "$matflow_vers_expected" ]

      - name: Run test suite on the frozen app
        run: |
          pyinstaller/dist/matflow-${{ env.vers }}-${{ matrix.executable_os }}${{ matrix.executable_ext }} test

  build-executables-linux:
    runs-on: ubuntu-latest
    container:
      image: aplowman/centos7-poetry
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # get all history and tags

      - name: Set ownership
        run: |
          # see: https://github.com/actions/runner/issues/2033#issuecomment-1204205989
          # this is to fix GIT not liking owner of the checkout dir
          chown -R $(id -u):$(id -g) $PWD

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache the virtualenv
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: venv-build-CentOS-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --without dev

      - name: Get exectuable version name
        run: |
          CUR_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_TAG is: $CUR_TAG"
          echo "cur_tag=$CUR_TAG" >> $GITHUB_ENV
          vers=$(git describe --tags)
          echo "vers is: $vers"
          echo "vers=$vers" >> $GITHUB_ENV

      - name: Build with pyinstaller for CentOS
        working-directory: pyinstaller
        run: ./make.sh matflow-${{ env.vers }}-linux ${{ github.event.inputs.logLevel }}

      - name: Upload executable artifact
        uses: actions/upload-artifact@v3
        with:
          name: matflow-${{ env.vers }}-linux
          path: pyinstaller/dist/matflow-${{ env.vers }}-linux

      - name: Upload spec file
        uses: actions/upload-artifact@v3
        with:
          name: matflow-${{ env.vers }}-linux.spec
          path: pyinstaller/matflow-${{ env.vers }}-linux.spec

      - name: Upload build directory
        uses: actions/upload-artifact@v3
        with:
          name: matflow-${{ env.vers }}-linux-build
          path: pyinstaller/build/matflow-${{ env.vers }}-linux

      - name: Version check
        run: |
          tag=${{ env.cur_tag }}
          tagNoV=${tag:1}
          matflow_vers=$(pyinstaller/dist/matflow-${{ env.vers }}-linux --version)
          matflow_vers_expected="matflow, version $tagNoV"
          echo $matflow_vers
          echo $matflow_vers_expected
          [ "$matflow_vers" = "$matflow_vers_expected" ]

      - name: Run test suite on the frozen app
        run: |
          pyinstaller/dist/matflow-${{ env.vers }}-linux test
